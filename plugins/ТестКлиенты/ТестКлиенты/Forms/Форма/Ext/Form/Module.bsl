&НаКлиенте
Перем ЗапущенныеТестКлиенты;

// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции

&НаКлиенте
Процедура ПодключитьТестКлиент_ПакетныйРежим(Параметры_xddTestClient) Экспорт
	
	Если Параметры_xddTestClient.Количество() > 0 И ТипЗнч(Параметры_xddTestClient[0]) <> Тип("ФиксированныйМассив") Тогда
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Параметры_xddTestClient);
		Параметры_xddTestClient = НовыйМассивПараметров;
	КонецЕсли;
	
	Для Каждого ОчередныеПараметры Из Параметры_xddTestClient Цикл
		Попытка
			ПользовательПарольПорт = РазложитьСтрокуВМассивПодстрок(ОчередныеПараметры[0], ":");
			Если ПользовательПарольПорт.Количество() = 3 Тогда
				ТестКлиент = ПодключитьТестКлиент(
				ПользовательПарольПорт[0],
				ПользовательПарольПорт[1],
				ПользовательПарольПорт[2]);
				ЗапомнитьДанныеТестКлиента(ТестКлиент, ПользовательПарольПорт[0], ПользовательПарольПорт[2]);
			Иначе
				ТестКлиент = ПодключитьТестКлиент();
				ЗапомнитьДанныеТестКлиента(ТестКлиент, "", "");
			КонецЕсли;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОписаниеОшибки = "Ошибка подключения тест-клиента в пакетном режиме
			|" + ПодробноеПредставлениеОшибки(Инфо);
			
			ЗафиксироватьОшибкуВЖурналеРегистрации("xUnitFor1C.ПодключитьТестКлиент", ОписаниеОшибки);
			Сообщить(ОписаниеОшибки, СтатусСообщения.ОченьВажное);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Замена функции СтрШаблон на конфигурациях с режимом совместимости < 8.3.6
// При внедрении в конфигурацию с режимом совместимости >= 8.3.6 данную функцию необходимо удалить
//
&НаКлиенте
Функция СтрШаблон_(Знач СтрокаШаблон, Знач Парам1 = Неопределено, Знач Парам2 = Неопределено, Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено) Экспорт
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Парам1);
	МассивПараметров.Добавить(Парам2);
	МассивПараметров.Добавить(Парам3);
	МассивПараметров.Добавить(Парам4);
	МассивПараметров.Добавить(Парам5);
	
	Для Сч = 1 По МассивПараметров.Количество() Цикл
		ТекЗначение = МассивПараметров[Сч-1];
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, "%"+Сч, Строка(ТекЗначение));
	КонецЦикла;
	Возврат СтрокаШаблон;
КонецФункции


&НаКлиенте
Функция ПодключитьТестКлиент(ИмяПользователя = "", Пароль = "", Порт = 1538) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Выполнить "Результат = Новый ТестируемоеПриложение(, XMLСтрока(Порт));";
	Исключение
	КонецПопытки;
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение "Не удалось создать объект ТестируемоеПриложение.
		|Возможно, что 1С:Предприятие 8 не было запущено в режиме Менеджера тестирования (ключ командной строки /TESTMANAGER)
		|При запуске Предприятия через Конфигуратор можно включить этот режим в параметрах конфигуратора Сервис -> Параметры -> Запуск 1С:Предприятия -> Дополнительные -> Автоматизированное тестирование -> пункт ""Запускать как менеджер тестирования"".";
	КонецЕсли;
	
	// Попытка подключиться к уже запущенному приложению.
	Подключен = Ложь;
	Попытка
		Результат.УстановитьСоединение();
		Подключен = Истина;
	Исключение
	КонецПопытки;
	
	Если Подключен Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапуститьПриложение(СтрокаЗапускаТестКлиента(ИмяПользователя, Пароль, Порт));
	
	ВремяОкончанияОжидания = ТекущаяДата() + ТаймаутВСекундах();
	ОписаниеОшибкиСоединения = "";
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			Результат.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Если Не Подключен Тогда
		ВызватьИсключение СтрШаблон_(
		"Не смогли установить соединение с тестовым приложением для пользователя %1!
		|%2",
		ИмяПользователя,
		ОписаниеОшибкиСоединения); 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьВсеТестКлиенты() Экспорт
	
	Если Не ЗначениеЗаполнено(ЗапущенныеТестКлиенты) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЗначение Из ЗапущенныеТестКлиенты Цикл
		Если ЭтоLinux() Тогда
			ЗапуститьПриложение("kill -9 `ps aux | grep -ie TESTCLIENT | grep -ie 1cv8c | awk '{print $2}'`");
		Иначе
			Scr = Новый COMОбъект("MSScriptControl.ScriptControl");
			Scr.Language = "vbscript";
			Scr.AddCode(ТекстСкриптаЗавершитьТестКлиент(ТекЗначение.Порт));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТестКлиентПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(ЗапущенныеТестКлиенты) Тогда
		Возврат ЗапущенныеТестКлиенты[0].ТестКлиент;
	КонецЕсли;
	
	Результат = ПодключитьТестКлиент();
	ЗапомнитьДанныеТестКлиента(Результат, "", "");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТестКлиентПоПараметрам(ИмяПользователя = "", Пароль = "", Порт = 1538) Экспорт
	
	Результат = НайтиЗапущенныйКлиент(ИмяПользователя, Порт);
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПодключитьТестКлиент(ИмяПользователя, Пароль, Порт);
	ЗапомнитьДанныеТестКлиента(Результат, ИмяПользователя, Порт);
	
	Возврат Результат;
	
КонецФункции
// } Plugin interface

// { Helpers
&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция СтрокаЗапускаТестКлиента(ИмяПользователя = "", Пароль = "", Порт = "")
	
	Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		ИмяПользователя = ИмяТекущегоПользователя();
	КонецЕсли;
	
	СтрокаЗапуска1с = КаталогПрограммы() + "1cv8c";
	
	Если Не ЭтоLinux() Тогда
		СтрокаЗапуска1с = СтрШаблон_("%1.exe", СтрокаЗапуска1с);
	КонецЕсли;
	
	Результат = СтрШаблон_(
	"%1 ENTERPRISE /IBConnectionString""%2"" /N""%3""%4 /TESTCLIENT -TPort%5",
	СтрокаЗапуска1с,
	СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """"""),
	ИмяПользователя,
	?(ПустаяСтрока(Пароль), ""," /P""" + Пароль + """"),
	XMLСтрока(Порт));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяТекущегоПользователя()
	
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
КонецФункции

&НаКлиенте
Функция ТаймаутВСекундах()
	
	Возврат 20;
	
КонецФункции

&НаКлиенте
Функция ТекстСкриптаЗавершитьТестКлиент(НомерПорта)
	
	Результат = "
	|Option Explicit
	|
	|Dim objWMIService, objProcess, colProcess
	|
	|Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"") 
	|
	|Set colProcess = objWMIService.ExecQuery(""Select * from Win32_Process Where (CommandLine Like '%/TESTCLIENT%' And ExecutablePath Like '%1cv8c%')"")
	|
	|For Each objProcess in colProcess
	|	objProcess.Terminate()
	|Next
	|";
	
	Если Не ЗначениеЗаполнено(НомерПорта) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат СтрЗаменить(
	Результат,
	"%/TESTCLIENT%",
	"%/TESTCLIENT -TPort" + НомерПорта + "%");
	
КонецФункции

&НаКлиенте
Функция ПолноеИмяИсполняемогоФайла()
	
	Возврат СтрШаблон_("%1%2%3",
	КаталогПрограммы(),
	"1cv8c",
	РасширениеИсполняемогоФайла());
	
КонецФункции

&НаКлиенте
Функция РасширениеИсполняемогоФайла()
	
	Если ЭтоLinux() Тогда
		Возврат "";
	Иначе
		Возврат ".exe";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЭтоLinux()
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	
	Возврат Найти(Строка(СисИнфо.ТипПлатформы), "Linux") > 0;
	
КонецФункции

&НаСервере
Процедура ЗафиксироватьОшибкуВЖурналеРегистрации(Знач ИдентификаторГенератораОтчета, Знач ОписаниеОшибки)
	ЗаписьЖурналаРегистрации(ИдентификаторГенератораОтчета, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьДанныеТестКлиента(ТестКлиент, ИмяПользователя, Порт)
	
	ДанныеТестКлиента = Новый Структура;
	ДанныеТестКлиента.Вставить("ТестКлиент", ТестКлиент);
	ДанныеТестКлиента.Вставить("ИмяПользователя", ИмяПользователя);
	ДанныеТестКлиента.Вставить("Порт", Порт);
	
	Если ЗапущенныеТестКлиенты = Неопределено Тогда
		ЗапущенныеТестКлиенты = Новый Массив;
	КонецЕсли;
	
	ЗапущенныеТестКлиенты.Добавить(ДанныеТестКлиента);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиЗапущенныйКлиент(ИмяПользователя, Порт)
	
	Если Не ЗначениеЗаполнено(ЗапущенныеТестКлиенты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ТекЗапущенныйКлиент Из ЗапущенныеТестКлиенты Цикл
		Если ТекЗапущенныйКлиент.ИмяПользователя = ИмяПользователя 
			И ТекЗапущенныйКлиент.Порт = Порт Тогда
			Возврат ТекЗапущенныйКлиент.ТестКлиент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


// } Helpers