#!groovy
def ONECVERSION="8.3.13.1513";
def cmdstring;

properties([disableConcurrentBuilds(), buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '10', daysToKeepStr: '', numToKeepStr: '10'))])
def tasks = [:]
def buildSerivceConf = ["1":"836UF", "2":"837UF", "3":"838UF", "4":"839UF", "5":"8310UF", "1":"8313"];
//builds = ["82OF", "82UF", "836OF", "836UF", "837UF", "838UF", "839UF", "8310UF"]
//builds = ["836UF", "837UF", "838UF", "839UF", "8310UF"]
builds = ["1","2","3","4","5","6"]
errorsStash = [:]
paths = [ "Core/TestClient": "TestClient",
    "StepsGenerator": "StepsGenerator",
    "StepsRunner":"StepsRunner",
    "StepsProgramming":"StepsProgramming",
    "Core/FeatureLoad": "FeatureLoad",
    "Core/FeatureReader": "FeatureReader",
    "Core/FeatureWriter": "FeatureWriter",
    "Core/OpenForm": "OpenForm",
    "libraries": "libraries",
    "Core/Translate": "Translate",
    "Core/ExpectedSomething": "ExpectedSomething"
    ]


if (env.filterBuilds && env.filterBuilds.length() > 0 ) {
    println "filter build";
    builds = builds.findAll{it.contains(env.filterBuilds) || env.filterBuilds.contains(it)};
}

def behaviortask(build, path, suffix, version){
    return {

        node ("test ${suffix}") {
                echo "====== ${build} ${suffix} ====="
                checkout scm
                unstash "buildResults"
                //cleanWs(patterns: [[pattern: 'build/**', type: 'INCLUDE']]);
                
                
               
                try{
                sh "./tools/linux/runtest${suffix}.sh"    
                } catch (e) {
                    sh 'docker exec -u ubuntu "$(cat ./container_id${suffix})" /bin/bash -c "cd /home/ubuntu/code; DISPLAY=:1.0 sudo chown -R 114 ./"'
                    echo "behavior ${build} ${path} ${suffix} status : ${e}"
                    sleep 2
                    cmd("7z a -ssw build${build}${suffix}.7z ./build/ -xr!*.cfl", true)
                    archiveArtifacts "build${build}${suffix}.7z"
                    currentBuild.result = 'UNSTABLE'
                }
                stash allowEmpty: true, includes: "build/ServiceBases/allurereport/*/**, build/ServiceBases/cucumber/*/**, build/ServiceBases/junitreport/*/**", name: "${build}"
        }

    }
}

builds.each{

    build = it;
    paths.each{
        tasks["behavior ${build} ${it.value}"] = behaviortask(build, it.key, it.value, buildSerivceConf[build])
    }
}

tasks["buildRelease"] = {
    node("master"){
        stage("build release"){
            echo "1"
            checkout scm
          //  sh 'docker run --detach -e XVFB_RESOLUTION=1920x1080x24 --volume="${PWD}":/home/ubuntu/code onec32/client:${ONECVERSION} client > ./container_id'
        
        def cmd = 'docker run --detach -eXVFB_RESOLUTION=1920x1080x24 --volume="${PWD}":/home/ubuntu/code onec32/client:latest client'
        gitCommit = sh(returnStdout: true, script: cmd).trim().take(6);
        echo gitCommit 
              dockercmd("docker exec -u ubuntu", gitCommit, '" /bin/bash -c "cd /home/ubuntu/code; DISPLAY=:1.0 sudo chown -R 114 ./"')
                        
            
            
            
            
            
            
            
            //sh 'docker exec -u ubuntu "$(cat ./container_id)" /bin/bash -c "cd /home/ubuntu/code; DISPLAY=:1.0 sudo chown -R 114 ./"'
            cleanWs(patterns: [[pattern: 'build/**', type: 'INCLUDE']]);
            cleanWs(patterns: [[pattern: './.forbuild/**', type: 'INCLUDE']]);
            cleanWs(patterns: [[pattern: '*.ospx, add.tar.gz, add.tar.bz2, add.7z, add.tar', type: 'INCLUDE']])
            try{
                sh "./tools/linux/release.sh"   
                archiveArtifacts '*.ospx, add*.zip'
            } catch (e) {
                echo "opm build release status : ${e}"
                sleep 2
                currentBuild.result = 'UNSTABLE'
            }
            stash allowEmpty: false, includes: "*.ospx, add*.zip", name: "deploy"

        }
    }
}

firsttasks=[:]


firsttasks["master"] = {
    node("master") {
        stage("checkout scm"){
            checkout scm
        }
        stage("buld"){
             sh "./tools/linux/build.sh"   
            
            cleanWs(patterns: [[pattern: 'build/ServiceBases/**', type: 'INCLUDE']])
            cleanWs(patterns: [[pattern: 'build/**', type: 'INCLUDE']])
            // try{

                println "before env.LOGOS_LEVEL = \'DEBUG\' "
                env.LOGOS_LEVEL = 'DEBUG'
                // sh 'printenv'

  
               // cmd "opm run init file --buildFolderPath ./build"
            // } catch (e) {
            //     echo "opm run init ${it} status : ${e}"
            //     currentBuild.result = 'UNSTABLE'
            // }
            stash excludes: 'build/cache.txt,build/ib/**,build/ibservice/**, build/ibservicexdd/**', includes: 'build/**', name: 'buildResults'
            //stash includes: 'build/**', name: 'buildResults'
        }
    }
}

// TODO добавить установку правильного движка, например, через ovm и включить задачу linuxbuild
// firsttasks["linuxbuild"] = {
// node("slavelinux"){
//     stage ("checkout scm") {
//         //cleanWs();
//         unix = isUnix();
//             if (!unix) {
//                 command = "git config --local core.longpaths true"
//                 cmd(command);
//             }
//             checkout scm
    
//     }
//     stage("build"){
//         def unix = isUnix()
//         //sh 'ls -al ./build'
//         cmd("sudo docker pull wernight/ngrok")
//         command = 'sudo docker run --detach -e XVFB_RESOLUTION=1920x1080x24 --volume="${PWD}":/home/ubuntu/code onec32/client:8.3.10.2466 client > /tmp/container_id_${BUILD_NUMBER}';
//         echo command;
//         cmd(command);
//         sh 'sleep 10'
//         sh 'sudo docker exec -u ubuntu "$(cat /tmp/container_id_${BUILD_NUMBER})" /bin/bash -c "cd /home/ubuntu/code; DISPLAY=:1.0 sudo opm install && sudo opm update -all"'
//         sh 'sudo docker exec -u ubuntu "$(cat /tmp/container_id_${BUILD_NUMBER})" /bin/bash -c "cd /home/ubuntu/code; DISPLAY=:1.0 opm run init && opm run clean"'
//         sh 'sudo rm -f vanessa-behavior*.ospx'
//         sh 'sudo docker exec -u ubuntu "$(cat /tmp/container_id_${BUILD_NUMBER})" /bin/bash -c "cd /home/ubuntu/code; DISPLAY=:1.0 opm build ./"'
//         sh 'sudo rm -rf vanessa-behavior.tar.gz && sudo rm -f vanessa-behavior-devel.tar.gz && sudo rm -f vanessa-behavior.zip'
//         sh 'cd ./build; tar -czf ../vanessa-behavior.tar.gz ./bddRunner.epf ./lib/ ./features/libraries ./vendor ./plugins ./locales; cd ..'
//         sh 'pwd && tar -czf ./vanessa-behavior-devel.tar.gz ./build env.json;'
//         sh 'sudo docker exec -u ubuntu "$(cat /tmp/container_id_${BUILD_NUMBER})" /bin/bash -c "cd /home/ubuntu/code; DISPLAY=:1.0 pushd ./build; zip -r ../vanessa-behavior.zip ./bddRunner.epf ./lib/ ./features/libraries ./vendor ./plugins ./locales; popd"'
//         sh 'tar -czf ./vanessa-behavior-devel.tar.gz ./build env.json;'
//         sh 'sudo docker exec -u ubuntu "$(cat /tmp/container_id_${BUILD_NUMBER})" /bin/bash -c "cd /home/ubuntu/code; DISPLAY=:1.0 pushd ./build; zip -r ../vanessa-behavior.zip ./bddRunner.epf ./lib/ ./features/libraries ./vendor ./plugins ./locales; popd"'
//         sh 'sudo docker stop "$(cat /tmp/container_id_${BUILD_NUMBER})"'
//         sh 'sudo docker rm "$(cat /tmp/container_id_${BUILD_NUMBER})"'

//         stash includes: 'build/**, *.ospx, vanessa-behavior-devel.tar.gz, vanessa-behavior.tar.gz, vanessa-behavior.zip, env.json', excludes: 'build/cache.txt', name: 'buildResults'
//     }

//     stage("archive"){
//         archiveArtifacts 'vanessa-behavior*.ospx,vanessa-behavior.tar.gz,vanessa-behavior-devel.tar.gz,vanessa-behavior.zip'
//     }
// }
// }

//tasks["opmrunclean"] = {
//    node("slave"){
//        checkout scm
//        cmd "opm run clean"
//    }
//}

parallel firsttasks
stage('tests'){
    parallel tasks
}

tasks = [:]
tasks["report"] = {
    node {
        stage("report"){
            cleanWs(patterns: [[pattern: 'build/ServiceBases/**', type: 'INCLUDE']]);
            unstash 'buildResults'
            builds.each{
                build = it;
                paths.each{
                    unstash "${build}${it.value}"
                }
            }
            unstash "video"
            unstash "xdd"
            try{
                allure includeProperties: false, jdk: '', 
                    results: [
                        [path: 'build/ServiceBases/allurereport/']
                    ]
                // allure commandline: 'allure2', includeProperties: false, jdk: '', results: [[path: 'build/ServiceBases/allurereport/']]
            } catch (e) {
                echo "allure status : ${e}"
                currentBuild.result = 'UNSTABLE'
            }
            junit 'build/ServiceBases/junitreport/**/*.xml'
            //junit 'build/ServiceBases/junitreport/*.xml'
            //cucumber fileIncludePattern: '**/*.json', jsonReportDirectory: 'build/ServiceBases/cucumber'
            
            try{
                archiveArtifacts 'build/ServiceBases/allurereport/**'
            } catch (e) {
                echo "report status : ${e}"
                currentBuild.result = 'UNSTABLE'
            }
            try{
            archiveArtifacts 'build/ServiceBases/junitreport/**'
            } catch (e) {
                echo "report status : ${e}"
                currentBuild.result = 'UNSTABLE'
            }
            try{
                archiveArtifacts 'build/ServiceBases/**'
            } catch (e) {
                echo "report status : ${e}"
                currentBuild.result = 'UNSTABLE'
            }
            //archiveArtifacts 'build/ServiceBases/junitreport/*.xml'
            //archiveArtifacts 'build/**'
        }
    }
}

//tasks["sonar"] = {
//}

parallel tasks

def dockercmd(prefix, id, suffix){
    def torun=""+prefix+ ""+id +suffix;
    sh to run
}
 
def cmd(command, status = false) {
    // TODO при запуске Jenkins не в режиме UTF-8 нужно написать chcp 1251 вместо chcp 65001
    isunix = isUnix();
    if (isunix) { sh returnStatus: status, script: "${command}" } else {bat returnStatus: status, script: "chcp 65001\n${command}"}
}
